var myQueen = function () {

	var scope = this;

	THREE.Geometry.call(this);

	v( 17.804483, 0.188293, -17.396908 );
	v( 20.789190, 0.188293, -13.760031 );
	v( 23.007029, 0.188293, -9.610748 );
	v( 24.372766, 0.188293, -5.108514 );
	v( 24.833920, 0.188293, -0.426348 );
	v( 24.372766, 0.188293, 4.255819 );
	v( 23.007030, 0.188293, 8.758053 );
	v( 20.789190, 0.188293, 12.907338 );
	v( 17.804482, 0.188293, 16.544216 );
	v( 14.167603, 0.188293, 19.528927 );
	v( 10.018318, 0.188293, 21.746765 );
	v( 5.516081, 0.188293, 23.112501 );
	v( 0.833912, 0.188293, 23.573654 );
	v( -3.848258, 0.188293, 23.112499 );
	v( -8.350493, 0.188293, 21.746759 );
	v( -12.499778, 0.188293, 19.528917 );
	v( -16.136654, 0.188293, 16.544207 );
	v( -19.121361, 0.188293, 12.907326 );
	v( -21.339197, 0.188293, 8.758039 );
	v( -22.704931, 0.188293, 4.255801 );
	v( -23.166080, 0.188293, -0.426369 );
	v( -22.704922, 0.188293, -5.108538 );
	v( -21.339178, 0.188293, -9.610773 );
	v( -19.121336, 0.188293, -13.760056 );
	v( -16.136621, 0.188293, -17.396931 );
	v( -12.499739, 0.188293, -20.381636 );
	v( -8.350451, 0.188293, -22.599468 );
	v( -3.848212, 0.188293, -23.965200 );
	v( 0.833958, 0.188293, -24.426346 );
	v( 5.516127, 0.188293, -23.965185 );
	v( 10.018361, 0.188293, -22.599438 );
	v( 14.167642, 0.188293, -20.381592 );
	v( 17.804516, 75.188293, -17.396875 );
	v( 20.789217, 75.188293, -13.759992 );
	v( 23.007048, 75.188293, -9.610702 );
	v( 24.372776, 75.188293, -5.108463 );
	v( 24.833920, 75.188293, -0.426292 );
	v( 24.372757, 75.188293, 4.255866 );
	v( 23.007015, 75.188293, 8.758089 );
	v( 20.789177, 75.188293, 12.907361 );
	v( 17.804472, 75.188293, 16.544228 );
	v( 14.167600, 75.188293, 19.528929 );
	v( 10.018325, 75.188293, 21.746761 );
	v( 5.516100, 75.188293, 23.112499 );
	v( 0.833942, 75.188293, 23.573654 );
	v( -3.848217, 75.188293, 23.112507 );
	v( -8.350445, 75.188293, 21.746778 );
	v( -12.499723, 75.188293, 19.528954 );
	v( -16.136600, 75.188293, 16.544260 );
	v( -19.121313, 75.188293, 12.907398 );
	v( -21.339159, 75.188293, 8.758130 );
	v( -22.704910, 75.188293, 4.255909 );
	v( -23.166080, 75.188293, -0.426247 );
	v( -22.704948, 75.188293, -5.108407 );
	v( -21.339233, 75.188293, -9.610640 );
	v( -19.121422, 75.188293, -13.759926 );
	v( -16.136740, 75.188293, -17.396812 );
	v( -12.499887, 75.188293, -20.381535 );
	v( -8.350627, 75.188293, -22.599396 );
	v( -3.848410, 75.188293, -23.965160 );
	v( 0.833745, 75.188293, -24.426346 );
	v( 5.515906, 75.188293, -23.965229 );
	v( 10.018143, 75.188293, -22.599529 );
	v( 14.167436, 75.188293, -20.381729 );
	v( 0.833920, 0.188293, -0.426346 );
	v( 0.833920, 75.188293, -0.426346 );

	f3( 64, 0, 1, 0.000000, -1.000000, -0.000000 );
	f3( 65, 33, 32, 0.000000, 1.000000, -0.000000 );
	f3( 64, 1, 2, 0.000000, -1.000000, -0.000000 );
	f3( 65, 34, 33, 0.000000, 1.000000, -0.000000 );
	f3( 64, 2, 3, 0.000000, -1.000000, -0.000000 );
	f3( 65, 35, 34, 0.000000, 1.000000, -0.000000 );
	f3( 64, 3, 4, 0.000000, -1.000000, -0.000000 );
	f3( 65, 36, 35, 0.000000, 1.000000, -0.000000 );
	f3( 64, 4, 5, 0.000000, -1.000000, -0.000000 );
	f3( 65, 37, 36, 0.000000, 1.000000, -0.000000 );
	f3( 64, 5, 6, 0.000000, -1.000000, -0.000000 );
	f3( 65, 38, 37, 0.000000, 1.000000, -0.000000 );
	f3( 64, 6, 7, 0.000000, -1.000000, -0.000000 );
	f3( 65, 39, 38, 0.000000, 1.000000, -0.000000 );
	f3( 64, 7, 8, 0.000000, -1.000000, -0.000000 );
	f3( 65, 40, 39, 0.000000, 1.000000, -0.000000 );
	f3( 64, 8, 9, 0.000000, -1.000000, -0.000000 );
	f3( 65, 41, 40, 0.000000, 1.000000, -0.000000 );
	f3( 64, 9, 10, 0.000000, -1.000000, -0.000000 );
	f3( 65, 42, 41, 0.000000, 1.000000, -0.000000 );
	f3( 64, 10, 11, 0.000000, -1.000000, -0.000000 );
	f3( 65, 43, 42, 0.000000, 1.000000, -0.000000 );
	f3( 64, 11, 12, 0.000000, -1.000000, -0.000000 );
	f3( 65, 44, 43, 0.000000, 1.000000, -0.000000 );
	f3( 64, 12, 13, 0.000000, -1.000000, -0.000000 );
	f3( 65, 45, 44, 0.000000, 1.000000, -0.000000 );
	f3( 64, 13, 14, 0.000000, -1.000000, -0.000000 );
	f3( 65, 46, 45, 0.000000, 1.000000, -0.000000 );
	f3( 64, 14, 15, 0.000000, -1.000000, -0.000000 );
	f3( 65, 47, 46, 0.000000, 1.000000, -0.000000 );
	f3( 64, 15, 16, 0.000000, -1.000000, -0.000000 );
	f3( 65, 48, 47, 0.000000, 1.000000, -0.000000 );
	f3( 64, 16, 17, 0.000000, -1.000000, -0.000000 );
	f3( 65, 49, 48, 0.000000, 1.000000, -0.000000 );
	f3( 64, 17, 18, 0.000000, -1.000000, -0.000000 );
	f3( 65, 50, 49, 0.000000, 1.000000, -0.000000 );
	f3( 64, 18, 19, 0.000000, -1.000000, -0.000000 );
	f3( 65, 51, 50, 0.000000, 1.000000, -0.000000 );
	f3( 64, 19, 20, 0.000000, -1.000000, -0.000000 );
	f3( 65, 52, 51, 0.000000, 1.000000, -0.000000 );
	f3( 64, 20, 21, 0.000000, -1.000000, -0.000000 );
	f3( 65, 53, 52, 0.000000, 1.000000, -0.000000 );
	f3( 64, 21, 22, 0.000000, -1.000000, -0.000000 );
	f3( 65, 54, 53, 0.000000, 1.000000, -0.000000 );
	f3( 64, 22, 23, 0.000000, -1.000000, -0.000000 );
	f3( 65, 55, 54, 0.000000, 1.000000, -0.000000 );
	f3( 64, 23, 24, 0.000000, -1.000000, -0.000000 );
	f3( 65, 56, 55, 0.000000, 1.000000, -0.000000 );
	f3( 64, 24, 25, 0.000000, -1.000000, -0.000000 );
	f3( 65, 57, 56, 0.000000, 1.000000, -0.000000 );
	f3( 64, 25, 26, 0.000000, -1.000000, -0.000000 );
	f3( 65, 58, 57, 0.000000, 1.000000, -0.000000 );
	f3( 64, 26, 27, 0.000000, -1.000000, -0.000000 );
	f3( 65, 59, 58, 0.000000, 1.000000, -0.000000 );
	f3( 64, 27, 28, 0.000000, -1.000000, -0.000000 );
	f3( 65, 60, 59, 0.000000, 1.000000, -0.000000 );
	f3( 64, 28, 29, 0.000000, -1.000000, -0.000000 );
	f3( 65, 61, 60, 0.000000, 1.000000, -0.000000 );
	f3( 64, 29, 30, 0.000000, -1.000000, -0.000000 );
	f3( 65, 62, 61, 0.000000, 1.000000, -0.000000 );
	f3( 64, 30, 31, 0.000000, -1.000000, -0.000000 );
	f3( 65, 63, 62, 0.000000, 1.000000, -0.000000 );
	f3( 31, 0, 64, 0.391888, -0.708792, -0.586505 );
	f3( 65, 32, 63, 0.000000, 1.000000, -0.000000 );
	f4( 0, 32, 33, 1, 0.498764, -0.708792, -0.498764 );
	f4( 1, 33, 34, 2, 0.586505, -0.708792, -0.391888 );
	f4( 2, 34, 35, 3, 0.651692, -0.708792, -0.269936 );
	f4( 3, 35, 36, 4, 0.691824, -0.708792, -0.137608 );
	f4( 4, 36, 37, 5, 0.705374, -0.708792, -0.000000 );
	f4( 5, 37, 38, 6, 0.691824, -0.708792, 0.137608 );
	f4( 6, 38, 39, 7, 0.651692, -0.708792, 0.269936 );
	f4( 7, 39, 40, 8, 0.586505, -0.708792, 0.391888 );
	f4( 8, 40, 41, 9, 0.498764, -0.708792, 0.498764 );
	f4( 9, 41, 42, 10, 0.391888, -0.708792, 0.586505 );
	f4( 10, 42, 43, 11, 0.269936, -0.708792, 0.651692 );
	f4( 11, 43, 44, 12, 0.137608, -0.708792, 0.691824 );
	f4( 12, 44, 45, 13, 0.000000, -0.708792, 0.705374 );
	f4( 13, 45, 46, 14, -0.137608, -0.708792, 0.691824 );
	f4( 14, 46, 47, 15, -0.269936, -0.708792, 0.651692 );
	f4( 15, 47, 48, 16, -0.391888, -0.708792, 0.586505 );
	f4( 16, 48, 49, 17, -0.498764, -0.708792, 0.498764 );
	f4( 17, 49, 50, 18, -0.586505, -0.708792, 0.391888 );
	f4( 18, 50, 51, 19, -0.651692, -0.708792, 0.269936 );
	f4( 19, 51, 52, 20, -0.691824, -0.708792, 0.137608 );
	f4( 20, 52, 53, 21, -0.705374, -0.708792, -0.000000 );
	f4( 21, 53, 54, 22, -0.691824, -0.708792, -0.137608 );
	f4( 22, 54, 55, 23, -0.651692, -0.708792, -0.269936 );
	f4( 23, 55, 56, 24, -0.586505, -0.708792, -0.391888 );
	f4( 24, 56, 57, 25, -0.498764, -0.708792, -0.498764 );
	f4( 25, 57, 58, 26, -0.391888, -0.708792, -0.586505 );
	f4( 26, 58, 59, 27, -0.269936, -0.708792, -0.651692 );
	f4( 27, 59, 60, 28, -0.137608, -0.708792, -0.691824 );
	f4( 28, 60, 61, 29, 0.000000, -0.708792, -0.705374 );
	f4( 29, 61, 62, 30, 0.137608, -0.708792, -0.691824 );
	f4( 30, 62, 63, 31, 0.269936, -0.708792, -0.651692 );
	f4( 32, 0, 31, 63, 0.498764, 0.708792, -0.498764 );


	function v( x, y, z ) {

		scope.vertices.push( new THREE.Vertex( new THREE.Vector3( x, y, z ) ) );

	}

	function f3( a, b, c, nx, ny, nz ) {

		scope.faces.push( new THREE.Face3( a, b, c, nx && ny && nz ? new THREE.Vector3( nx, ny, nz ) : null ) );

	}

	function f4( a, b, c, d, nx, ny, nz ) {

		scope.faces.push( new THREE.Face4( a, b, c, d, nx && ny && nz ? new THREE.Vector3( nx, ny, nz ) : null ) );

	}

	function uv( u1, v1, u2, v2, u3, v3, u4, v4 ) {

		var uv = [];
		uv.push( new THREE.UV( u1, v1 ) );
		uv.push( new THREE.UV( u2, v2 ) );
		uv.push( new THREE.UV( u3, v3 ) );
		if ( u4 && v4 ) uv.push( new THREE.UV( u4, v4 ) );
		scope.uvs.push( uv );
	}

	this.computeCentroids();
	this.computeFaceNormals();
	this.sortFacesByMaterial();
}

myQueen.prototype = new THREE.Geometry();
myQueen.prototype.constructor = myQueen;