var myBishop = function () {

	var scope = this;

	THREE.Geometry.call(this);

	v( 8.443897, -0.042339, -8.759882 );
	v( 9.998434, -0.042339, -6.865674 );
	v( 11.153557, -0.042339, -4.704590 );
	v( 11.864880, -0.042339, -2.359677 );
	v( 12.105062, -0.042339, 0.078952 );
	v( 11.864880, -0.042339, 2.517581 );
	v( 11.153559, -0.042339, 4.862494 );
	v( 9.998434, -0.042339, 7.023580 );
	v( 8.443897, -0.042339, 8.917788 );
	v( 6.549690, -0.042339, 10.472323 );
	v( 4.388604, -0.042339, 11.627448 );
	v( 2.043689, -0.042339, 12.338769 );
	v( -0.394941, -0.042339, 12.578953 );
	v( -2.833571, -0.042339, 12.338768 );
	v( -5.178485, -0.042339, 11.627444 );
	v( -7.339571, -0.042339, 10.472319 );
	v( -9.233778, -0.042339, 8.917782 );
	v( -10.788313, -0.042339, 7.023573 );
	v( -11.943436, -0.042339, 4.862486 );
	v( -12.654755, -0.042339, 2.517571 );
	v( -12.894938, -0.042339, 0.078941 );
	v( -12.654751, -0.042339, -2.359689 );
	v( -11.943426, -0.042339, -4.704603 );
	v( -10.788300, -0.042339, -6.865688 );
	v( -9.233761, -0.042339, -8.759893 );
	v( -7.339551, -0.042339, -10.314426 );
	v( -5.178463, -0.042339, -11.469548 );
	v( -2.833547, -0.042339, -12.180867 );
	v( -0.394917, -0.042339, -12.421047 );
	v( 2.043713, -0.042339, -12.180860 );
	v( 4.388626, -0.042339, -11.469533 );
	v( 6.549710, -0.042339, -10.314404 );
	v( 8.443914, 57.538273, -8.759865 );
	v( 9.998447, 54.297947, -6.865654 );
	v( 11.153566, 52.064983, -4.704566 );
	v( 11.864883, 50.689861, -2.359650 );
	v( 12.105062, 49.971153, 0.078981 );
	v( 11.864874, 50.689861, 2.517605 );
	v( 11.153551, 52.064983, 4.862513 );
	v( 9.998426, 54.297947, 7.023592 );
	v( 8.443892, 57.538273, 8.917793 );
	v( 6.549688, 61.317085, 10.472324 );
	v( 4.388608, 65.582817, 11.627446 );
	v( 2.043699, 70.209488, 12.338767 );
	v( -0.394925, 74.997742, 12.578953 );
	v( -2.833550, 70.169777, 12.338772 );
	v( -5.178460, 65.465614, 11.627455 );
	v( -7.339543, 61.256626, 10.472338 );
	v( -9.233749, 57.455376, 8.917809 );
	v( -10.788286, 54.369358, 7.023611 );
	v( -11.943415, 52.077316, 4.862534 );
	v( -12.654743, 50.603859, 2.517627 );
	v( -12.894938, 49.948990, 0.079004 );
	v( -12.654764, 50.603859, -2.359621 );
	v( -11.943455, 52.077316, -4.704534 );
	v( -10.788343, 54.369358, -6.865620 );
	v( -9.233822, 57.455376, -8.759831 );
	v( -7.339628, 61.256626, -10.314375 );
	v( -5.178555, 65.465614, -11.469510 );
	v( -2.833650, 70.169777, -12.180846 );
	v( -0.395028, 74.873421, -12.421047 );
	v( 2.043598, 70.169777, -12.180882 );
	v( 4.388513, 65.582817, -11.469580 );
	v( 6.549603, 61.317085, -10.314476 );
	v( -0.394937, -0.042339, 0.078953 );
	v( -0.394937, 74.997742, 0.078953 );

	f3( 64, 0, 1, 0.000000, -1.000000, -0.000000 );
	f3( 65, 33, 32, -0.000397, 0.999969, -0.000824 );
	f3( 64, 1, 2, 0.000000, -1.000000, -0.000000 );
	f3( 65, 34, 33, -0.000397, 0.999969, -0.000824 );
	f3( 64, 2, 3, 0.000000, -1.000000, -0.000000 );
	f3( 65, 35, 34, -0.000397, 0.999969, -0.000824 );
	f3( 64, 3, 4, 0.000000, -1.000000, -0.000000 );
	f3( 65, 36, 35, -0.000397, 0.999969, -0.000824 );
	f3( 64, 4, 5, 0.000000, -1.000000, -0.000000 );
	f3( 65, 37, 36, -0.000397, 0.999969, -0.000824 );
	f3( 64, 5, 6, 0.000000, -1.000000, -0.000000 );
	f3( 65, 38, 37, -0.000397, 0.999969, -0.000824 );
	f3( 64, 6, 7, 0.000000, -1.000000, -0.000000 );
	f3( 65, 39, 38, -0.000397, 0.999969, -0.000824 );
	f3( 64, 7, 8, 0.000000, -1.000000, -0.000000 );
	f3( 65, 40, 39, -0.000397, 0.999969, -0.000824 );
	f3( 64, 8, 9, 0.000000, -1.000000, -0.000000 );
	f3( 65, 41, 40, -0.000397, 0.999969, -0.000824 );
	f3( 64, 9, 10, 0.000000, -1.000000, -0.000000 );
	f3( 65, 42, 41, -0.000397, 0.999969, -0.000824 );
	f3( 64, 10, 11, 0.000000, -1.000000, -0.000000 );
	f3( 65, 43, 42, -0.000397, 0.999969, -0.000824 );
	f3( 64, 11, 12, 0.000000, -1.000000, -0.000000 );
	f3( 65, 44, 43, -0.000397, 0.999969, -0.000824 );
	f3( 64, 12, 13, 0.000000, -1.000000, -0.000000 );
	f3( 65, 45, 44, -0.000397, 0.999969, -0.000824 );
	f3( 64, 13, 14, 0.000000, -1.000000, -0.000000 );
	f3( 65, 46, 45, -0.000397, 0.999969, -0.000824 );
	f3( 64, 14, 15, 0.000000, -1.000000, -0.000000 );
	f3( 65, 47, 46, -0.000397, 0.999969, -0.000824 );
	f3( 64, 15, 16, 0.000000, -1.000000, -0.000000 );
	f3( 65, 48, 47, -0.000397, 0.999969, -0.000824 );
	f3( 64, 16, 17, 0.000000, -1.000000, -0.000000 );
	f3( 65, 49, 48, -0.000397, 0.999969, -0.000824 );
	f3( 64, 17, 18, 0.000000, -1.000000, -0.000000 );
	f3( 65, 50, 49, -0.000397, 0.999969, -0.000824 );
	f3( 64, 18, 19, 0.000000, -1.000000, -0.000000 );
	f3( 65, 51, 50, -0.000397, 0.999969, -0.000824 );
	f3( 64, 19, 20, 0.000000, -1.000000, -0.000000 );
	f3( 65, 52, 51, -0.000397, 0.999969, -0.000824 );
	f3( 64, 20, 21, 0.000000, -1.000000, -0.000000 );
	f3( 65, 53, 52, -0.000397, 0.999969, -0.000824 );
	f3( 64, 21, 22, 0.000000, -1.000000, -0.000000 );
	f3( 65, 54, 53, -0.000397, 0.999969, -0.000824 );
	f3( 64, 22, 23, 0.000000, -1.000000, -0.000000 );
	f3( 65, 55, 54, -0.000397, 0.999969, -0.000824 );
	f3( 64, 23, 24, 0.000000, -1.000000, -0.000000 );
	f3( 65, 56, 55, -0.000397, 0.999969, -0.000824 );
	f3( 64, 24, 25, 0.000000, -1.000000, -0.000000 );
	f3( 65, 57, 56, -0.000397, 0.999969, -0.000824 );
	f3( 64, 25, 26, 0.000000, -1.000000, -0.000000 );
	f3( 65, 58, 57, -0.000397, 0.999969, -0.000824 );
	f3( 64, 26, 27, 0.000000, -1.000000, -0.000000 );
	f3( 65, 59, 58, -0.000397, 0.999969, -0.000824 );
	f3( 64, 27, 28, 0.000000, -1.000000, -0.000000 );
	f3( 65, 60, 59, -0.000397, 0.999969, -0.000824 );
	f3( 64, 28, 29, 0.000000, -1.000000, -0.000000 );
	f3( 65, 61, 60, -0.000397, 0.999969, -0.000824 );
	f3( 64, 29, 30, 0.000000, -1.000000, -0.000000 );
	f3( 65, 62, 61, -0.000397, 0.999969, -0.000824 );
	f3( 64, 30, 31, 0.000000, -1.000000, -0.000000 );
	f3( 65, 63, 62, -0.000397, 0.999969, -0.000824 );
	f3( 31, 0, 64, 0.391888, -0.708792, -0.586505 );
	f3( 65, 32, 63, -0.000397, 0.999969, -0.000824 );
	f4( 0, 32, 33, 1, 0.498764, -0.708792, -0.498764 );
	f4( 1, 33, 34, 2, 0.586505, -0.708792, -0.391888 );
	f4( 2, 34, 35, 3, 0.651692, -0.708792, -0.269936 );
	f4( 3, 35, 36, 4, 0.691824, -0.708792, -0.137608 );
	f4( 4, 36, 37, 5, 0.705374, -0.708792, -0.000000 );
	f4( 5, 37, 38, 6, 0.691824, -0.708792, 0.137608 );
	f4( 6, 38, 39, 7, 0.651692, -0.708792, 0.269936 );
	f4( 7, 39, 40, 8, 0.586505, -0.708792, 0.391888 );
	f4( 8, 40, 41, 9, 0.498764, -0.708792, 0.498764 );
	f4( 9, 41, 42, 10, 0.391888, -0.708792, 0.586505 );
	f4( 10, 42, 43, 11, 0.269936, -0.708792, 0.651692 );
	f4( 11, 43, 44, 12, 0.137608, -0.708792, 0.691824 );
	f4( 12, 44, 45, 13, 0.000000, -0.708792, 0.705374 );
	f4( 13, 45, 46, 14, -0.137608, -0.708792, 0.691824 );
	f4( 14, 46, 47, 15, -0.269936, -0.708792, 0.651692 );
	f4( 15, 47, 48, 16, -0.391888, -0.708792, 0.586505 );
	f4( 16, 48, 49, 17, -0.498764, -0.708792, 0.498764 );
	f4( 17, 49, 50, 18, -0.586505, -0.708792, 0.391888 );
	f4( 18, 50, 51, 19, -0.651692, -0.708792, 0.269936 );
	f4( 19, 51, 52, 20, -0.691824, -0.708792, 0.137608 );
	f4( 20, 52, 53, 21, -0.705374, -0.708792, -0.000000 );
	f4( 21, 53, 54, 22, -0.691824, -0.708792, -0.137608 );
	f4( 22, 54, 55, 23, -0.651692, -0.708792, -0.269936 );
	f4( 23, 55, 56, 24, -0.586505, -0.708792, -0.391888 );
	f4( 24, 56, 57, 25, -0.498764, -0.708792, -0.498764 );
	f4( 25, 57, 58, 26, -0.391888, -0.708792, -0.586505 );
	f4( 26, 58, 59, 27, -0.269936, -0.708792, -0.651692 );
	f4( 27, 59, 60, 28, -0.137608, -0.708792, -0.691824 );
	f4( 28, 60, 61, 29, 0.000000, -0.708792, -0.705374 );
	f4( 29, 61, 62, 30, 0.137608, -0.708792, -0.691824 );
	f4( 30, 62, 63, 31, 0.269936, -0.708792, -0.651692 );
	f4( 32, 0, 31, 63, 0.889279, 0.248238, -0.384075 );


	function v( x, y, z ) {

		scope.vertices.push( new THREE.Vertex( new THREE.Vector3( x, y, z ) ) );

	}

	function f3( a, b, c, nx, ny, nz ) {

		scope.faces.push( new THREE.Face3( a, b, c, nx && ny && nz ? new THREE.Vector3( nx, ny, nz ) : null ) );

	}

	function f4( a, b, c, d, nx, ny, nz ) {

		scope.faces.push( new THREE.Face4( a, b, c, d, nx && ny && nz ? new THREE.Vector3( nx, ny, nz ) : null ) );

	}

	function uv( u1, v1, u2, v2, u3, v3, u4, v4 ) {

		var uv = [];
		uv.push( new THREE.UV( u1, v1 ) );
		uv.push( new THREE.UV( u2, v2 ) );
		uv.push( new THREE.UV( u3, v3 ) );
		if ( u4 && v4 ) uv.push( new THREE.UV( u4, v4 ) );
		scope.uvs.push( uv );
	}

	this.computeCentroids();
	this.computeFaceNormals();
	this.sortFacesByMaterial();
}

myBishop.prototype = new THREE.Geometry();
myBishop.prototype.constructor = myBishop;