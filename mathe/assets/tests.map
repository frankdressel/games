{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","mathe/tests/app.jshint.lint-test.js","mathe/tests/components/plusminus-component.jshint.lint-test.js","mathe/tests/components/singlenumber-input.jshint.lint-test.js","mathe/tests/controllers/tasks.jshint.lint-test.js","mathe/tests/helpers/destroy-app.js","mathe/tests/helpers/destroy-app.jshint.lint-test.js","mathe/tests/helpers/module-for-acceptance.js","mathe/tests/helpers/module-for-acceptance.jshint.lint-test.js","mathe/tests/helpers/resolver.js","mathe/tests/helpers/resolver.jshint.lint-test.js","mathe/tests/helpers/start-app.js","mathe/tests/helpers/start-app.jshint.lint-test.js","mathe/tests/integration/components/plusminus-component-test.js","mathe/tests/integration/components/plusminus-component-test.jshint.lint-test.js","mathe/tests/integration/components/singlenumber-input-test.js","mathe/tests/integration/components/singlenumber-input-test.jshint.lint-test.js","mathe/tests/models/Task.jshint.lint-test.js","mathe/tests/resolver.jshint.lint-test.js","mathe/tests/router.jshint.lint-test.js","mathe/tests/routes/tasks.jshint.lint-test.js","mathe/tests/test-helper.js","mathe/tests/test-helper.jshint.lint-test.js","mathe/tests/unit/controllers/tasks-test.js","mathe/tests/unit/controllers/tasks-test.jshint.lint-test.js","mathe/tests/unit/routes/tasks-test.js","mathe/tests/unit/routes/tasks-test.jshint.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('mathe/tests/app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('mathe/tests/components/plusminus-component.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/plusminus-component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/plusminus-component.js should pass jshint.\\ncomponents/plusminus-component.js: line 36, col 108, Missing semicolon.\\ncomponents/plusminus-component.js: line 40, col 13, \\'thirdString\\' is defined but never used.\\n\\n2 errors');\n  });\n});","define('mathe/tests/components/singlenumber-input.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/singlenumber-input.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/singlenumber-input.js should pass jshint.\\ncomponents/singlenumber-input.js: line 7, col 43, Expected \\'!==\\' and instead saw \\'!=\\'.\\ncomponents/singlenumber-input.js: line 13, col 80, Expected \\'!==\\' and instead saw \\'!=\\'.\\n\\n2 errors');\n  });\n});","define('mathe/tests/controllers/tasks.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/tasks.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/tasks.js should pass jshint.\\ncontrollers/tasks.js: line 12, col 78, Missing semicolon.\\ncontrollers/tasks.js: line 13, col 43, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/tasks.js: line 24, col 25, Expected \\'===\\' and instead saw \\'==\\'.\\ncontrollers/tasks.js: line 51, col 47, Expected \\'===\\' and instead saw \\'==\\'.\\n\\n4 errors');\n  });\n});","define('mathe/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('mathe/tests/helpers/destroy-app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('mathe/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'mathe/tests/helpers/start-app', 'mathe/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _matheTestsHelpersStartApp, _matheTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _matheTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _matheTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('mathe/tests/helpers/module-for-acceptance.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('mathe/tests/helpers/resolver', ['exports', 'mathe/resolver', 'mathe/config/environment'], function (exports, _matheResolver, _matheConfigEnvironment) {\n\n  var resolver = _matheResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _matheConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _matheConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('mathe/tests/helpers/resolver.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('mathe/tests/helpers/start-app', ['exports', 'ember', 'mathe/app', 'mathe/config/environment'], function (exports, _ember, _matheApp, _matheConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _matheConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _matheApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('mathe/tests/helpers/start-app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('mathe/tests/integration/components/plusminus-component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('plusminus-component', 'Integration | Component | plusminus component', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '5hgsUsdZ',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"plusminus-component\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'bnl/tjmY',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"plusminus-component\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('mathe/tests/integration/components/plusminus-component-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/plusminus-component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/plusminus-component-test.js should pass jshint.');\n  });\n});","define('mathe/tests/integration/components/singlenumber-input-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('singlenumber-input', 'Integration | Component | singlenumber input', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'fv2Cca2/',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"singlenumber-input\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'xWOQaOMM',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"singlenumber-input\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('mathe/tests/integration/components/singlenumber-input-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/singlenumber-input-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/singlenumber-input-test.js should pass jshint.');\n  });\n});","define('mathe/tests/models/Task.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/Task.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/Task.js should pass jshint.\\nmodels/Task.js: line 3, col 7, \\'Task\\' is defined but never used.\\n\\n1 error');\n  });\n});","define('mathe/tests/resolver.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('mathe/tests/router.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('mathe/tests/routes/tasks.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/tasks.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/tasks.js should pass jshint.\\nroutes/tasks.js: line 2, col 37, Missing semicolon.\\n\\n1 error');\n  });\n});","define('mathe/tests/test-helper', ['exports', 'mathe/tests/helpers/resolver', 'ember-qunit'], function (exports, _matheTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_matheTestsHelpersResolver['default']);\n});","define('mathe/tests/test-helper.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('mathe/tests/unit/controllers/tasks-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:tasks', 'Unit | Controller | tasks', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('mathe/tests/unit/controllers/tasks-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/tasks-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/tasks-test.js should pass jshint.');\n  });\n});","define('mathe/tests/unit/routes/tasks-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:tasks', 'Unit | Route | tasks', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('mathe/tests/unit/routes/tasks-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/tasks-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/tasks-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('mathe/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}