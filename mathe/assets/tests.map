{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","mathe/tests/integration/components/plusminus-component-test.js","mathe/tests/lint/app.lint-test.js","mathe/tests/lint/templates.template.lint-test.js","mathe/tests/lint/tests.lint-test.js","mathe/tests/test-helper.js","mathe/tests/unit/controllers/tasks-test.js","mathe/tests/unit/routes/tasks-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"mathe/tests/integration/components/plusminus-component-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | plusminus-component', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      let route = this.owner.lookup('route:tasks');\n      let model = route.model();\n      this.set('model', model);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <PlusminusComponent @model={{model}}/>\n      */\n      {\n        id: \"e96+mVyq\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"plusminus-component\\\",[],[[\\\"@model\\\"],[[22,\\\"model\\\"]]]]],\\\"hasEval\\\":false}\",\n        meta: {}\n      })); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        \n            <PlusminusComponent @model={{model}}>\n            </PlusminusComponent>\n          \n      */\n      {\n        id: \"6O8PoV/9\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[5,\\\"plusminus-component\\\",[],[[\\\"@model\\\"],[[22,\\\"model\\\"]]],{\\\"statements\\\":[[0,\\\"\\\\n      \\\"]],\\\"parameters\\\":[]}],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.ok(true);\n    });\n    (0, _qunit.test)('it show success markers', async function (assert) {\n      let route = this.owner.lookup('route:tasks');\n      let model = route.model();\n      this.set('model', model);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <PlusminusComponent @model={{model}}/>\n      */\n      {\n        id: \"e96+mVyq\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"plusminus-component\\\",[],[[\\\"@model\\\"],[[22,\\\"model\\\"]]]]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal((0, _testHelpers.findAll)('.success-marker').length, model.results.length);\n    });\n    (0, _qunit.test)('it shows 6 digit number fields with input', async function (assert) {\n      let route = this.owner.lookup('route:tasks');\n      let model = route.model();\n      this.set('model', model);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <PlusminusComponent @model={{model}}/>\n      */\n      {\n        id: \"e96+mVyq\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"plusminus-component\\\",[],[[\\\"@model\\\"],[[22,\\\"model\\\"]]]]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      assert.equal((0, _testHelpers.findAll)('.first').length, 6);\n      assert.equal((0, _testHelpers.findAll)('.second').length, 6);\n      assert.equal((0, _testHelpers.findAll)('.third').length, 6);\n\n      for (let e of (0, _testHelpers.findAll)('.third')) {\n        assert.equal(e.nodeName, 'INPUT');\n        assert.ok(!e.disabled);\n      }\n    });\n    (0, _qunit.test)('it shows an button to submit the result', async function (assert) {\n      assert.expect(3);\n      let route = this.owner.lookup('route:tasks');\n      let model = route.model();\n      this.set('model', model);\n      this.set('korrigiert', function () {\n        assert.ok(true);\n      });\n      this.set('berechnet', function () {\n        assert.ok(true);\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <PlusminusComponent @model={{model}} @berechnet={{action berechnet}} @korrigiert={{action korrigiert}}/>\n      */\n      {\n        id: \"tyjcJ6rp\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"plusminus-component\\\",[],[[\\\"@model\\\",\\\"@berechnet\\\",\\\"@korrigiert\\\"],[[22,\\\"model\\\"],[28,\\\"action\\\",[[23,0,[]],[24,[\\\"berechnet\\\"]]],null],[28,\\\"action\\\",[[23,0,[]],[24,[\\\"korrigiert\\\"]]],null]]]]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      let button = (0, _testHelpers.find)('.ready');\n      assert.ok(button);\n      (0, _testHelpers.click)(button);\n      (0, _testHelpers.click)(button);\n    });\n    (0, _qunit.test)('input is set at least at second button click', async function (assert) {\n      assert.expect(3);\n      let route = this.owner.lookup('route:tasks');\n      let model = route.model();\n      this.set('model', model);\n      this.set('korrigiert', function () {\n        assert.equal(model.results[model.counter].third, 123456);\n      });\n      this.set('berechnet', function () {\n        assert.ok(true);\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <PlusminusComponent @model={{model}} @berechnet={{action berechnet}} @korrigiert={{action korrigiert}}/>\n      */\n      {\n        id: \"tyjcJ6rp\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"plusminus-component\\\",[],[[\\\"@model\\\",\\\"@berechnet\\\",\\\"@korrigiert\\\"],[[22,\\\"model\\\"],[28,\\\"action\\\",[[23,0,[]],[24,[\\\"berechnet\\\"]]],null],[28,\\\"action\\\",[[23,0,[]],[24,[\\\"korrigiert\\\"]]],null]]]]],\\\"hasEval\\\":false}\",\n        meta: {}\n      }));\n      let num_input = (0, _testHelpers.findAll)('.third');\n\n      for (let i = 0; i < num_input.lenth; i++) {\n        num_input[i].value = '' + (i + 1);\n      }\n\n      let button = (0, _testHelpers.find)('.ready');\n      assert.ok(button);\n      (0, _testHelpers.click)(button);\n      (0, _testHelpers.click)(button);\n    });\n    (0, _qunit.test)('success-marker shows task after submit', async function (assert) {\n      let route = this.owner.lookup('route:tasks');\n      let model = route.model();\n      this.set('model', model);\n\n      for (let i = 0; i < model.results.length; i++) {\n        await (0, _testHelpers.render)(Ember.HTMLBars.template(\n        /*\n          <PlusminusComponent @model={{model}}/>\n        */\n        {\n          id: \"e96+mVyq\",\n          block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"plusminus-component\\\",[],[[\\\"@model\\\"],[[22,\\\"model\\\"]]]]],\\\"hasEval\\\":false}\",\n          meta: {}\n        }));\n        let exp = '' + i;\n        assert.equal((0, _testHelpers.findAll)('.success-marker')[i].textContent, exp);\n        model.results[i].correct = true;\n        await (0, _testHelpers.render)(Ember.HTMLBars.template(\n        /*\n          <PlusminusComponent @model={{model}}/>\n        */\n        {\n          id: \"e96+mVyq\",\n          block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"plusminus-component\\\",[],[[\\\"@model\\\"],[[22,\\\"model\\\"]]]]],\\\"hasEval\\\":false}\",\n          meta: {}\n        }));\n        exp = model.results[i].first + model.results[i].plusminus + model.results[i].second;\n        assert.equal((0, _testHelpers.findAll)('.success-marker')[i].textContent, exp);\n        model.results[i].correct = false;\n        await (0, _testHelpers.render)(Ember.HTMLBars.template(\n        /*\n          <PlusminusComponent @model={{model}}/>\n        */\n        {\n          id: \"e96+mVyq\",\n          block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"plusminus-component\\\",[],[[\\\"@model\\\"],[[22,\\\"model\\\"]]]]],\\\"hasEval\\\":false}\",\n          meta: {}\n        }));\n        exp = model.results[i].first + model.results[i].plusminus + model.results[i].second;\n        assert.equal((0, _testHelpers.findAll)('.success-marker')[i].textContent, exp);\n      }\n    });\n  });\n});","define(\"mathe/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/plusminus-component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/plusminus-component.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/tasks.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/tasks.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/tasks.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/tasks.js should pass ESLint\\n\\n');\n  });\n});","define(\"mathe/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('mathe/templates/application.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mathe/templates/application.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('mathe/templates/tasks.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mathe/templates/tasks.hbs should pass TemplateLint.\\n\\n');\n  });\n});","define(\"mathe/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('integration/components/plusminus-component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/plusminus-component-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/controllers/tasks-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/tasks-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/tasks-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/tasks-test.js should pass ESLint\\n\\n');\n  });\n});","define(\"mathe/tests/test-helper\", [\"mathe/app\", \"mathe/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"mathe/tests/unit/controllers/tasks-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | tasks', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:tasks');\n      assert.ok(controller);\n    });\n    (0, _qunit.test)('berechnet sets state', function (assert) {\n      let controller = this.owner.lookup('controller:tasks');\n      let route = this.owner.lookup('route:tasks');\n      let model = route.model();\n      controller.set('model', model);\n      assert.equal(model.startState, true);\n      assert.equal(model.berechnetState, false);\n      controller.berechnet();\n      assert.equal(model.startState, false);\n      assert.equal(model.berechnetState, true);\n    });\n    (0, _qunit.test)('korrigiert sets state and correct flag', function (assert) {\n      let controller = this.owner.lookup('controller:tasks');\n      let route = this.owner.lookup('route:tasks');\n      let model = route.model();\n      controller.set('model', model);\n\n      for (let i = 0; i < model.results.length; i++) {\n        assert.equal(model.counter, i); // First half of results is wrong, last half set to correct values.\n\n        model.results[i].result = i < model.results.length / 2 ? model.results[i].third - 1 : model.results[i].third;\n        model.startState = false;\n        model.berechnetState = true;\n        assert.equal(model.startState, false);\n        assert.equal(model.berechnetState, true);\n        controller.korrigiert();\n        assert.equal(model.startState, true);\n        assert.equal(model.berechnetState, false);\n        assert.equal(model.results[i].correct, i < model.results.length / 2 ? false : true);\n      }\n    });\n  });\n});","define(\"mathe/tests/unit/routes/tasks-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | tasks', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:tasks');\n      assert.ok(route);\n    });\n    (0, _qunit.test)('it contains 10 tasks', function (assert) {\n      let route = this.owner.lookup('route:tasks');\n      let model = route.model();\n      assert.ok(model.results.length == 10);\n    });\n    (0, _qunit.test)('correct flag is null', function (assert) {\n      let route = this.owner.lookup('route:tasks');\n      let model = route.model();\n\n      for (let i = 0; i < model.results.length; i++) {\n        assert.ok(model.results[i].correct == null);\n      }\n    });\n    (0, _qunit.test)('numbers are correct', function (assert) {\n      let route = this.owner.lookup('route:tasks');\n      let model = route.model();\n\n      for (let i = 0; i < model.results.length; i++) {\n        let result_i = model.results[i];\n\n        switch (result_i.plusminus) {\n          case '+':\n            assert.equal(result_i.first + result_i.second, result_i.third);\n            break;\n\n          case '-':\n            assert.equal(result_i.first - result_i.second, result_i.third);\n            break;\n\n          case '*':\n            assert.equal(result_i.first * result_i.second, result_i.third);\n            break;\n\n          case '/':\n            assert.equal(result_i.first / result_i.second, result_i.third);\n            break;\n        }\n      }\n    });\n  });\n});","define('mathe/config/environment', [], function() {\n  var prefix = 'mathe';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('mathe/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingszKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}